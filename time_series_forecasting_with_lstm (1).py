# -*- coding: utf-8 -*-
"""Time series Forecasting with LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hibMeX_ywlY1VIw6TqSgxVy7TB5LY5MU
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

data = pd.read_csv('/content/drive/MyDrive/dataset007.csv')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv('/content/drive/MyDrive/dataset007.csv')

# Convert the 'Hour' column to a datetime object and sort the data
data['Hour'] = pd.to_datetime(data['Hour'], format='%m-%d-%Y %H:%M')
data = data.sort_values(by='Hour')

# Check the first few rows of the dataset
print(data.head())

# Check the basic statistics of the dataset
print(data.describe())

# Visualize the data
plt.figure(figsize=(12, 6))
plt.plot(data['Hour'], data['Lane 1 Occ (%)'], label='Lane 1 Occupancy (%)')
plt.plot(data['Hour'], data['Lane 1 Speed (mph)'], label='Lane 1 Speed (mph)')
plt.xlabel('Hour')
plt.ylabel('Values')
plt.title('Lane 1 Occupancy and Speed Over Time')
plt.legend()
plt.grid(True)
plt.show()

# Feature selection: Choose relevant columns for modeling
features = ["Lane 1 Occ (%)", "Lane 1 Speed (mph)", "Lane 2 Occ (%)", "Lane 2 Speed (mph)"]
target = ["Speed (mph)"]

# Split the data into features and target
X = data[features].values
y = data[target].values

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalize the data using Min-Max scaling
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Create an LSTM model
model_lstm = Sequential()
model_lstm.add(LSTM(64, input_shape=(X_train.shape[1], 1), activation='relu'))
model_lstm.add(Dense(1, activation='linear'))

model_lstm.compile(loss='mean_squared_error', optimizer='adam')

# Train the LSTM model for short-term forecasting
model_lstm.fit(X_train, y_train, epochs=77, batch_size=32, validation_data=(X_test, y_test))

from sklearn.metrics import r2_score

# Predictions from LSTM
y_pred_lstm = model_lstm.predict(X_test)

# Calculate R-squared
r2_lstm = r2_score(y_test, y_pred_lstm)

print(f"R-squared for LSTM Model: {r2_lstm}")

from sklearn.metrics import mean_squared_error, mean_absolute_error

# Calculate RMSE
rmse = np.sqrt(mean_squared_error(y_test, y_pred_lstm))
print(f"RMSE for LSTM Model: {rmse}")

# Calculate MAE
mae = mean_absolute_error(y_test, y_pred_lstm)
print(f"MAE for LSTM Model: {mae}")

# Calculate MASE
# MASE = MAE / MAE_naive, where MAE_naive is the MAE of a simple naive model (e.g., using the previous value as a forecast)
naive_forecast = np.roll(y_test, 1)
mae_naive = mean_absolute_error(y_test[1:], naive_forecast[1:])
mase = mae / mae_naive
print(f"MASE for LSTM Model: {mase}")

# Calculate MAPE
# MAPE = (1/n) * Î£ |(actual - forecast) / actual| * 100, where n is the number of samples
mape = (np.mean(np.abs((y_test - y_pred_lstm) / y_test)) * 100)
print(f"MAPE for LSTM Model: {mape}")

import matplotlib.pyplot as plt

# Visualize the predictions for LSTM model
plt.figure(figsize=(12, 6))
plt.plot(y_test, label='Actual')
plt.plot(y_pred_lstm, label='Predicted (LSTM)')
plt.legend()
plt.title('Actual vs. Predicted Traffic Speed (LSTM)')
plt.xlabel('Sample')
plt.ylabel('Speed (mph)')
plt.show()